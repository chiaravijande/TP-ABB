#include "abb.h"
#include "abb_estructura_privada.h"
#include <stdlib.h>
#include <stdio.h>

void *abb_raiz(const abb_t *abb)
{
	if (!abb)
		return NULL;
	return (void *)abb->raiz;
}

int (*abb_comparador(const abb_t *abb))(const void *, const void *)
{
	if (!abb)
		return NULL;

	return abb->comparador;
}

abb_t *abb_crear(int (*cmp)(const void *, const void *))
{
	if (!cmp)
		return NULL;

	abb_t *abb = malloc(sizeof(abb_t));
	if (!abb)
		return NULL;

	abb->comparador = cmp;
	abb->raiz = NULL;
	abb->nodos = 0;

	return abb;
}

bool insertar_nodo(nodo_t **nodo, nodo_t *nuevo,
		   int (*comparador)(const void *, const void *))
{
	if (!*nodo) {
		*nodo = nuevo;
		return true;
	}

	int cmp_result = comparador(nuevo->elemento, (*nodo)->elemento);
	if (cmp_result <= 0) {
		return insertar_nodo(&(*nodo)->izq, nuevo, comparador);
	} else {
		return insertar_nodo(&(*nodo)->der, nuevo, comparador);
	}
}

size_t abb_nodos(const abb_t *abb)
{
	if (!abb)
		return 0;
	return abb->nodos;
}

bool abb_insertar(abb_t *abb, const void *elemento)
{
	if (!abb || !elemento)
		return false;

	nodo_t *nuevo = malloc(sizeof(nodo_t));
	if (!nuevo)
		return false;

	nuevo->elemento = (void *)elemento;
	nuevo->izq = NULL;
	nuevo->der = NULL;

	bool resultado = insertar_nodo(&abb->raiz, nuevo, abb->comparador);
	if (resultado)
		abb->nodos++;

	return resultado;
}

bool abb_existe(const abb_t *abb, const void *elemento)
{
	if (!abb || !elemento)
		return false;
	nodo_t *actual = abb->raiz;

	while (actual) {
		if (!actual || !actual->elemento)
			return false;

		int cmp_result = abb->comparador(elemento, actual->elemento);
		if (cmp_result == 0) {
			return true;
		} else {
			actual = (cmp_result < 0) ? actual->izq : actual->der;
		}
	}

	return false;
}

void *abb_buscar(const abb_t *abb, const void *elemento)
{
	if (!abb || !elemento)
		return NULL;

	nodo_t *actual = abb->raiz;

	while (actual) {
		int cmp_result = abb->comparador(elemento, actual->elemento);
		if (cmp_result == 0) {
			return actual->elemento;
		}

		actual = (cmp_result < 0) ? actual->izq : actual->der;
	}

	return NULL;
}

nodo_t *eliminar_nodo_con_hijos_unicos(nodo_t *nodo)
{
	nodo_t *hijo = nodo->izq ? nodo->izq : nodo->der;
	free(nodo);
	return hijo;
}

nodo_t *encontrar_y_reemplazar_con_predecesor(nodo_t *nodo,
					      nodo_t **referencia_padre)
{
	nodo_t *predecesor = nodo->izq;
	nodo_t *padre_predecesor = nodo;

	while (predecesor->der) {
		padre_predecesor = predecesor;
		predecesor = predecesor->der;
	}

	nodo->elemento = predecesor->elemento;

	if (padre_predecesor->der == predecesor) {
		padre_predecesor->der = predecesor->izq;
	} else {
		padre_predecesor->izq = predecesor->izq;
	}

	predecesor->izq = NULL;
	predecesor->der = NULL;
	free(predecesor);

	return nodo;
}

nodo_t *eliminar_nodo_postorden(nodo_t *nodo, const void *elemento,
				int (*comparador)(const void *, const void *),
				void **elemento_eliminado, bool *encontrado)
{
	if (!nodo)
		return NULL;

	nodo->izq = eliminar_nodo_postorden(nodo->izq, elemento, comparador,
					    elemento_eliminado, encontrado);
	nodo->der = eliminar_nodo_postorden(nodo->der, elemento, comparador,
					    elemento_eliminado, encontrado);

	if (!nodo || !nodo->elemento)
		return nodo;

	if (!*encontrado && comparador(elemento, nodo->elemento) == 0) {
		*encontrado = true;
		*elemento_eliminado = nodo->elemento;

		nodo_t *nuevo_nodo = NULL;
		if (!nodo->izq || !nodo->der) {
			nuevo_nodo = eliminar_nodo_con_hijos_unicos(nodo);
		} else {
			nuevo_nodo = encontrar_y_reemplazar_con_predecesor(
				nodo, &(nodo->izq));
		}

		nodo = NULL;

		free(nodo);

		return nuevo_nodo;
	}

	return nodo;
}

void *abb_sacar_todo(abb_t *abb, const void *elemento,
		     void (*destructor)(void *))
{
	if (!abb || !abb->raiz)
		return NULL;

	void *elemento_eliminado = NULL;
	bool encontrado = false;

	printf("Intentando eliminar elemento: %p\n", elemento);

	nodo_t *nueva_raiz =
		eliminar_nodo_postorden(abb->raiz, elemento, abb->comparador,
					&elemento_eliminado, &encontrado);

	if (encontrado) {
		if (elemento_eliminado) {
			printf("Elemento eliminado correctamente: %p\n",
			       elemento_eliminado);
		} else {
			printf("Ã¢Å¡Â  Error: Se esperaba un elemento eliminado, pero es NULL\n");
		}

		if (nueva_raiz) {
			printf("Nueva raÃƒÂ­z despuÃƒÂ©s de eliminar: %p\n",
			       (void *)nueva_raiz);
			abb->raiz = nueva_raiz;
		} else {
			printf("Ã¢Å¡Â  AtenciÃƒÂ³n: La nueva raÃƒÂ­z es NULL\n");
		}

		abb->nodos--;

		if (destructor && elemento_eliminado) {
			printf("Llamando al destructor para: %p\n",
			       elemento_eliminado);
			destructor(elemento_eliminado);
		} else if (!destructor) {
			printf("Ã¢Å¡Â  Destructor no definido\n");
		} else if (!elemento_eliminado) {
			printf("Ã¢Å¡Â  No hay elemento a destruir\n");
		}
	}

	return elemento_eliminado;
}

void *abb_sacar(abb_t *abb, const void *elemento)
{
	if (!abb || !elemento)
		return NULL;
	return abb_sacar_todo(abb, elemento, NULL);
}

size_t abb_tamanio(const abb_t *abb)
{
	if (!abb)
		return 0;

	return abb->nodos;
}

bool abb_vacio(const abb_t *abb)
{
	if (!abb)
		return true;

	return abb->nodos == 0;
}

void recorrer_nodos(nodo_t *nodo, enum abb_recorrido modo,
		    bool (*f)(void *, void *), void *ctx, size_t *contador)
{
	if (!nodo)
		return;

	if (modo == ABB_PREORDEN) {
		if (!f(nodo->elemento, ctx)) {
			printf("ðŸš¨ Se detiene en nodo: %p | Elemento: %p | Contador final: %zu\n",
			       (void *)nodo, (void *)nodo->elemento, *contador);
			return;
		}
		(*contador)++; // âœ… Contamos SOLO si `f()` devuelve true
		recorrer_nodos(nodo->izq, modo, f, ctx, contador);
		recorrer_nodos(nodo->der, modo, f, ctx, contador);
	} else if (modo == ABB_INORDEN) {
		recorrer_nodos(nodo->izq, modo, f, ctx, contador);
		if (!f(nodo->elemento, ctx)) {
			printf("ðŸš¨ Se detiene en nodo: %p | Elemento: %p | Contador final: %zu\n",
			       (void *)nodo, (void *)nodo->elemento, *contador);
			return;
		}
		(*contador)++;
		recorrer_nodos(nodo->der, modo, f, ctx, contador);
	} else if (modo == ABB_POSTORDEN) {
		recorrer_nodos(nodo->izq, modo, f, ctx, contador);
		recorrer_nodos(nodo->der, modo, f, ctx, contador);
		if (!f(nodo->elemento, ctx)) {
			printf("ðŸš¨ Se detiene en nodo: %p | Elemento: %p | Contador final: %zu\n",
			       (void *)nodo, (void *)nodo->elemento, *contador);
			return;
		}
		(*contador)++;
	}
}

size_t abb_recorrer(const abb_t *abb, enum abb_recorrido modo,
		    bool (*f)(void *, void *), void *ctx)
{
	if (!abb || !f)
		return 0;

	size_t contador = 0;

	recorrer_nodos(abb->raiz, modo, f, ctx, &contador);

	printf("Total recorrido antes de retornar: %zu\n", contador);

	return contador;
}

static void vectorizar_nodos(nodo_t *nodo, enum abb_recorrido modo,
			     void **vector, size_t capacidad, size_t *contador)
{
	if (!nodo || *contador >= capacidad)
		return;

	if (modo == ABB_PREORDEN) {
		vector[(*contador)++] = nodo->elemento;
		vectorizar_nodos(nodo->izq, modo, vector, capacidad, contador);
		vectorizar_nodos(nodo->der, modo, vector, capacidad, contador);
	} else if (modo == ABB_INORDEN) {
		vectorizar_nodos(nodo->izq, modo, vector, capacidad, contador);
		if (*contador < capacidad)
			vector[(*contador)++] = nodo->elemento;
		vectorizar_nodos(nodo->der, modo, vector, capacidad, contador);
	} else if (modo == ABB_POSTORDEN) {
		vectorizar_nodos(nodo->izq, modo, vector, capacidad, contador);
		vectorizar_nodos(nodo->der, modo, vector, capacidad, contador);
		if (*contador < capacidad)
			vector[(*contador)++] = nodo->elemento;
	}
}

size_t abb_vectorizar(const abb_t *abb, enum abb_recorrido modo, void **vector,
		      size_t capacidad)
{
	if (!abb || !vector || capacidad == 0)
		return 0;

	size_t contador = 0;

	vectorizar_nodos(abb->raiz, modo, vector, capacidad, &contador);

	return contador;
}

void destruir_arbol_con_destructor(nodo_t *nodo, void (*destructor)(void *))
{
	if (!nodo)
		return;

	destruir_arbol_con_destructor(nodo->izq, destructor);
	destruir_arbol_con_destructor(nodo->der, destructor);

	if (destructor)
		destructor(nodo->elemento);
	nodo->izq = NULL; // Ã¢Å“â€¦ Limpiar referencias antes de liberar
	nodo->der = NULL;
	free(nodo);
}

void abb_destruir_todo(abb_t *abb, void (*destructor)(void *))
{
	if (!abb || !abb->raiz)
		return;

	destruir_arbol_con_destructor(abb->raiz, destructor);
	abb->raiz = NULL;
	free(abb);
}

void destruir_arbol(nodo_t *nodo)
{
	if (!nodo)
		return;

	if (nodo->izq)
		destruir_arbol(nodo->izq);
	if (nodo->der)
		destruir_arbol(nodo->der);

	free(nodo);
}

void abb_destruir(abb_t *abb)
{
	if (!abb)
		return;

	if (abb->raiz) {
		destruir_arbol(abb->raiz);
		abb->raiz = NULL;
	}
	free(abb);
}